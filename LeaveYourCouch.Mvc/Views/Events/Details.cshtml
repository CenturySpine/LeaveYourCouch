@using LeaveYourCouch.Mvc.Business
@using LeaveYourCouch.Mvc.Controllers
@model LeaveYourCouch.Mvc.Models.EventDataDetailsViewModel

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@if (!string.IsNullOrEmpty(ViewBag.StatusMessage))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @ViewBag.StatusMessage
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
<div class="container first-content">
    <div class="row">
        <div class="col">
            @Html.DisplayNameFor(model => model.Event.Title)
        </div>
        <div class="col">
            @Model.Event.Date.ToShortDateString()

        </div>
        <div class="col">
            @Model.Event.Time.ToString("g")

        </div>
    </div>
    <dl class="dl-horizontal">

        <dt>
            @Html.DisplayNameFor(model => model.Event.Description)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Event.Description)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Event.MaxSeats)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Participants.Count)<text>/</text>
            @Html.DisplayFor(model => model.Event.MaxSeats)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Event.Address)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Event.Address)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Event.MeetingDetails)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Event.MeetingDetails)
        </dd>

    </dl>

    <hr />
    <div class="row text-center">
        @foreach (var distances in Model.UserData)
        {
            string icon;
            switch (distances.DirectionMode)
            {
                case DirectionModes.driving:
                    icon = "fas fa-car";
                    break;
                case DirectionModes.walking:
                    icon = "fas fa-shoe-prints";
                    break;
                case DirectionModes.bicycling:
                    icon = "fas fa-bicycle";
                    break;
                case DirectionModes.transit:
                    icon = "fas fa-bus";
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
            <div class="col">
                <span class="event-user-ditance">
                    <i class='@icon'></i>
                </span>
            </div>
        }

    </div>
    <div class="row text-center">
        @foreach (var distances in Model.UserData)
        {
            <div class="col">
                <span class="event-user-ditance">
                    <a href=@distances.MapLink target="_blank">
                        @distances.Distance.ToString("##.0") @distances.Unit -
                        @distances.Duration min
                    </a>
                </span>
            </div>
        }

    </div>
    <hr />
    <div class="row">
        @{
            var currentUser = UserHelpers.UserName();
            bool isUnsub = Model.Participants.Any(p => p.Email == currentUser);
            if (isUnsub)
            {
                <div class="col">
                    @Html.ActionLink("Unsubscribe", "UnSubscribe", new { id = Model.Event.Id }, new { @Class = "btn btn-block btn-primary", Style = "margin:2px 0;" })
                </div>
            }
            else
            {
                <div class="col">
                    @Html.ActionLink("Subscribe", "Subscribe", new { id = Model.Event.Id }, new { @Class = "btn btn-block btn-primary", Style = "margin:2px 0;" })
                </div>
            }
        }




        @if (Model.CanModify)
        {
            <div class="col">
                @Html.ActionLink("Edit", "Edit", new { id = Model.Event.Id }, new { @Class = "btn btn-block  btn-primary", Style = "margin:2px 0;" })
            </div>
            <div class="col">
                @Html.ActionLink("Delete", "Delete", new { id = Model.Event.Id }, new { @Class = "btn btn-block btn-primary", Style = "margin:2px 0;" })
            </div>
        }
        <div class="col">
            @Html.ActionLink("Back to List", "Index", null, new { @Class = "btn btn-block btn-primary", Style = "margin:2px 0;" })
        </div>
    </div>
</div>